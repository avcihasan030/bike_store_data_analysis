-- Comprehensive Data Analysis Scenarios

-- ----------------------------------------------------------------------------
-- 1. Top-Selling Product Categories
-- Objective: Identify the top-selling product categories by total sales revenue and sales count.
-- ----------------------------------------------------------------------------

-- Top-selling categories by total sales revenue
SELECT
    c.category_name,
    SUM(oi.revenue) AS total_sales
FROM
    order_items oi
        JOIN products p USING (product_id)
        JOIN categories c USING (category_id)
GROUP BY
    c.category_name
ORDER BY
    total_sales DESC;

-- Top-selling categories by number of sales (count of orders)
SELECT
    c.category_name,
    COUNT(*) AS count_sales
FROM
    order_items oi
        JOIN products p USING (product_id)
        JOIN categories c USING (category_id)
GROUP BY
    c.category_name
ORDER BY
    count_sales DESC;

-- ----------------------------------------------------------------------------
-- 2. Highest Spending Customers
-- Objective: Identify high-value customers using RFM (Recency, Frequency, Monetary) analysis.
-- ----------------------------------------------------------------------------

WITH customer_rfm AS (
    SELECT
        c.customer_id,
        MAX(o.order_date) AS last_purchase, -- Most recent purchase date
        COUNT(DISTINCT o.order_id) AS frequency, -- Number of orders
        SUM(oi.quantity * oi.list_price) AS monetary -- Total spending
    FROM
        customers c
            JOIN orders o USING (customer_id)
            JOIN order_items oi USING (order_id)
    GROUP BY
        c.customer_id
)
SELECT
    customer_id,
    DATEDIFF('2018-12-28', last_purchase) AS recency, -- Days since last purchase
    frequency,
    monetary
FROM
    customer_rfm
ORDER BY
    recency DESC, frequency DESC, monetary DESC; -- Prioritize recent, frequent, and high-spending customers

-- ----------------------------------------------------------------------------
-- 3. Store-Based Monthly Sales Trend
-- Objective: Analyze monthly sales trends for each store.
-- ----------------------------------------------------------------------------

SELECT
    s.store_name,
    DATE_FORMAT(o.order_date, '%Y-%m') AS month, -- Format order date as YYYY-MM
    SUM(oi.quantity * oi.list_price) AS monthly_sales -- Calculate monthly sales
FROM
    stores s
        JOIN orders o ON s.store_id = o.store_id
        JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY
    s.store_name, DATE_FORMAT(o.order_date, '%Y-%m')
ORDER BY
    month, monthly_sales DESC; -- Sort by month and sales in descending order

-- ----------------------------------------------------------------------------
-- 4. Customer Lifetime Value (CLV)
-- Objective: Calculate the total revenue generated by each customer to identify high-value customers.
-- ----------------------------------------------------------------------------

WITH customer_revenue AS (
    SELECT
        c.customer_id,
        CONCAT(first_name, ' ', last_name) AS customer_name, -- Combine first and last name
        SUM(oi.revenue) AS total_revenue -- Calculate total revenue per customer
    FROM
        customers c
            JOIN orders o ON c.customer_id = o.customer_id
            JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY
        c.customer_id
)
SELECT
    customer_id,
    customer_name,
    total_revenue,
    NTILE(4) OVER (ORDER BY total_revenue DESC) AS revenue_quartile -- Divide customers into quartiles based on revenue
FROM
    customer_revenue;

-- ----------------------------------------------------------------------------
-- 5. Order Fulfillment Efficiency
-- Objective: Analyze order fulfillment efficiency by calculating the time taken to ship orders.
-- ----------------------------------------------------------------------------

SELECT
    o.order_id,
    o.order_date,
    o.shipped_date,
    DATEDIFF(o.shipped_date, o.order_date) AS days_to_ship, -- Calculate days taken to ship
    s.store_name,
    CASE
        WHEN DATEDIFF(o.shipped_date, o.order_date) > 7 THEN 'Delayed' -- Mark orders delayed if shipping takes >7 days
        ELSE 'On Time'
        END AS shipping_status
FROM
    orders o
        JOIN stores s ON o.store_id = s.store_id;

-- ----------------------------------------------------------------------------
-- 6. Staff Performance Analysis
-- Objective: Evaluate employee performance based on the number of orders processed and total sales.
-- ----------------------------------------------------------------------------

WITH staff_sales AS (
    SELECT
        s.staff_id,
        CONCAT(s.first_name, ' ', s.last_name) AS staff_name, -- Combine first and last name
        COUNT(DISTINCT o.order_id) AS total_orders_processed, -- Count of orders processed
        SUM(oi.revenue) AS total_sales -- Total sales generated
    FROM
        staffs s
            JOIN orders o USING (staff_id)
            JOIN order_items oi USING (order_id)
    GROUP BY
        s.staff_id
)
SELECT
    staff_id,
    staff_name,
    total_orders_processed,
    total_sales,
    RANK() OVER (ORDER BY total_sales DESC) AS sales_rank -- Rank staff by total sales
FROM
    staff_sales;

-- ----------------------------------------------------------------------------
-- 7. Seasonal Sales Trends
-- Objective: Analyze monthly sales trends to identify seasonal patterns.
-- ----------------------------------------------------------------------------

SELECT
    DATE_FORMAT(o.order_date, '%Y-%m') AS month, -- Format order date as YYYY-MM
    SUM(oi.revenue) AS monthly_sales -- Calculate monthly sales
FROM
    orders o
        JOIN order_items oi USING (order_id)
GROUP BY
    DATE_FORMAT(o.order_date, '%Y-%m')
ORDER BY
    month; -- Sort by month

-- ----------------------------------------------------------------------------
-- 8. Moving Averages
-- Objective: Calculate the 7-day moving average of daily sales to analyze sales trends over time.
-- ----------------------------------------------------------------------------

SELECT
    o.order_date,
    SUM(oi.revenue) AS daily_sales, -- Total sales for the day
    AVG(SUM(oi.revenue)) OVER (
        ORDER BY o.order_date
        ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
        ) AS moving_avg_7_days -- 7-day moving average of daily sales
FROM
    orders o
        JOIN order_items oi USING (order_id)
GROUP BY
    o.order_date
ORDER BY
    o.order_date; -- Sort by order date for chronological analysis

-- ----------------------------------------------------------------------------
-- 9. A/B Testing
-- Objective: Compare the performance of two discount groups (10% vs 20%) in terms of total orders and revenue.
-- ----------------------------------------------------------------------------

-- Total revenue across all orders (for context)
SELECT
    SUM(oi.revenue) AS total_amount
FROM
    order_items oi;

-- A/B Testing: Compare discount groups
WITH CTE AS (
    SELECT
        o.order_id,
        oi.revenue,
        CASE
            WHEN oi.discount = 0.1 THEN 'Group A (10%)' -- Group A: 10% discount
            WHEN oi.discount = 0.2 THEN 'Group B (20%)' -- Group B: 20% discount
            END AS discount_group
    FROM
        orders o
            JOIN order_items oi USING (order_id)
    WHERE
        oi.discount IN (0.1, 0.2) -- Filter for orders with 10% or 20% discount
)
SELECT
    discount_group,
    COUNT(order_id) AS total_orders, -- Total number of orders per group
    SUM(revenue) AS total_revenue -- Total revenue per group
FROM
    CTE
GROUP BY
    discount_group; -- Group results by discount group

-- ----------------------------------------------------------------------------
-- 10. Customer Churn Analysis
-- Objective: Identify customers who have churned (not made a purchase in the last 6 months).
-- ----------------------------------------------------------------------------

SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    MAX(o.order_date) AS last_purchase_date, -- Most recent purchase date for each customer
    CASE
        WHEN DATEDIFF(NOW(), MAX(o.order_date)) > 180 THEN 'Churned' -- Churned if no purchase in the last 6 months
        ELSE 'Active' -- Otherwise, mark as active
        END AS churn_status
FROM
    customers c
        LEFT JOIN orders o ON c.customer_id = o.customer_id -- Include customers with no orders
GROUP BY
    c.customer_id, c.first_name, c.last_name; -- Group by customer details